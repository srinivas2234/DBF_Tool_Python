# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import mysql.connector
import pandas as pd
import numpy as np
import datetime
import random
from random import randint
from datetime import timedelta
from datetime import date
import math
import numpy as np
import matplotlib.pyplot as plt
import sys
import gspread
from gspread_dataframe import set_with_dataframe
import time
import copy
from PyQt5 import QtTest

from oauth2client.service_account import ServiceAccountCredentials
from gspread.exceptions import WorksheetNotFound

from oauth2client.service_account import ServiceAccountCredentials
from googleapiclient.discovery import build
from googleapiclient import discovery
from googleapiclient.http import BatchHttpRequest


from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QTableView
from PyQt5.QtCore import QAbstractTableModel, Qt, QDate

from PyQt5.QtGui import QPainter, QStandardItemModel, QStandardItem
from PyQt5.QtSql import QSqlQueryModel, QSqlQuery

from PyQt5.QtCore import QThread, pyqtSignal
import multiprocessing


from PyQt5.QtChart import QChart, QChartView, QBarSet, QBarSeries, QBarCategoryAxis, QValueAxis


# from PyQt5.QtWidgets import (
#     QApplication,
#     QHBoxLayout,
#     QPushButton,
#     QWidget,
#     QtCharts,
#     QBarSeries,
#     QBarSet,
#     QLegend,
#     QBarCategoryAxis,
#     QChartView
# )
#<QtCharts/QChartView>
#include <QtCharts/QBarSeries>
#include <QtCharts/QBarSet>
#include <QtCharts/QLegend>
#include <QtCharts/QBarCategoryAxis>

from PyQt5 import QtCore, QtGui, QtWidgets

nounc_string = ""



mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  password="",
  database="qtdatabase"
)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1375, 815)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textEdit_cropstatus = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_cropstatus.setGeometry(QtCore.QRect(10, 490, 241, 201))
        self.textEdit_cropstatus.setStyleSheet("background-color: rgb(228, 246, 255);")
        self.textEdit_cropstatus.setObjectName("textEdit_cropstatus")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(10, 150, 241, 71))
        self.groupBox_2.setStyleSheet("background-color: rgb(255, 197, 250);")
        self.groupBox_2.setObjectName("groupBox_2")
        self.radioButton_totalseed = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton_totalseed.setGeometry(QtCore.QRect(10, 20, 101, 21))
        self.radioButton_totalseed.setObjectName("radioButton_totalseed")
        self.radioButton_cropUNsown = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton_cropUNsown.setGeometry(QtCore.QRect(10, 40, 101, 21))
        self.radioButton_cropUNsown.setObjectName("radioButton_cropUNsown")
        self.radioButton_cropSown = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton_cropSown.setGeometry(QtCore.QRect(110, 20, 91, 21))
        self.radioButton_cropSown.setChecked(True)
        self.radioButton_cropSown.setObjectName("radioButton_cropSown")
        self.Get_Data_pushButton = QtWidgets.QPushButton(self.groupBox_2)
        self.Get_Data_pushButton.setGeometry(QtCore.QRect(110, 40, 111, 23))
        self.Get_Data_pushButton.setObjectName("Get_Data_pushButton")
        self.pushButton_CropRegister = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_CropRegister.setGeometry(QtCore.QRect(138, 450, 101, 24))
        self.pushButton_CropRegister.setObjectName("pushButton_CropRegister")
        self.tableView_GetData = QtWidgets.QTableView(self.centralwidget)
        self.tableView_GetData.setEnabled(True)
        self.tableView_GetData.setGeometry(QtCore.QRect(1210, 10, 271, 681))
        self.tableView_GetData.setObjectName("tableView_GetData")
        self.widget_plot = QtWidgets.QWidget(self.centralwidget)
        self.widget_plot.setGeometry(QtCore.QRect(720, 320, 491, 371))
        self.widget_plot.setAcceptDrops(True)
        self.widget_plot.setObjectName("widget_plot")
        self.widgetCropDemand = QtWidgets.QWidget(self.centralwidget)
        self.widgetCropDemand.setGeometry(QtCore.QRect(260, 0, 451, 311))
        self.widgetCropDemand.setObjectName("widgetCropDemand")
        self.widgetSeed_Data_plot = QtWidgets.QWidget(self.centralwidget)
        self.widgetSeed_Data_plot.setGeometry(QtCore.QRect(720, 0, 491, 311))
        self.widgetSeed_Data_plot.setObjectName("widgetSeed_Data_plot")
        self.widgetCurrentCropDemand = QtWidgets.QWidget(self.centralwidget)
        self.widgetCurrentCropDemand.setGeometry(QtCore.QRect(260, 320, 451, 371))
        self.widgetCurrentCropDemand.setObjectName("widgetCurrentCropDemand")
        self.pushButton_ResetDatabase = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_ResetDatabase.setGeometry(QtCore.QRect(10, 740, 101, 24))
        self.pushButton_ResetDatabase.setObjectName("pushButton_ResetDatabase")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 290, 241, 151))
        self.groupBox_3.setStyleSheet("background-color: rgb(162, 255, 155);")
        self.groupBox_3.setObjectName("groupBox_3")
        self.radioButton_AllCrops_Marketwise = QtWidgets.QRadioButton(self.groupBox_3)
        self.radioButton_AllCrops_Marketwise.setGeometry(QtCore.QRect(10, 80, 141, 20))
        self.radioButton_AllCrops_Marketwise.setChecked(True)
        self.radioButton_AllCrops_Marketwise.setObjectName("radioButton_AllCrops_Marketwise")
        self.radioButton_All_Markets_Cropwise = QtWidgets.QRadioButton(self.groupBox_3)
        self.radioButton_All_Markets_Cropwise.setGeometry(QtCore.QRect(10, 100, 131, 20))
        self.radioButton_All_Markets_Cropwise.setObjectName("radioButton_All_Markets_Cropwise")
        self.pushButton_marketArrival = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_marketArrival.setGeometry(QtCore.QRect(10, 120, 141, 24))
        self.pushButton_marketArrival.setObjectName("pushButton_marketArrival")
        self.comboBox_market = QtWidgets.QComboBox(self.groupBox_3)
        self.comboBox_market.setGeometry(QtCore.QRect(120, 50, 109, 22))
        self.comboBox_market.setObjectName("comboBox_market")
        self.comboBox_market.addItem("")
        self.comboBox_market.addItem("")
        self.comboBox_market.addItem("")
        self.comboBox_market.addItem("")
        self.comboBox_market.addItem("")
        self.comboBox_market.addItem("")
        self.comboBox_market.addItem("")
        self.comboBox_market.addItem("")
        self.comboBox_market.addItem("")
        self.label = QtWidgets.QLabel(self.groupBox_3)
        self.label.setGeometry(QtCore.QRect(10, 20, 100, 22))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.comboBox_CropType = QtWidgets.QComboBox(self.groupBox_3)
        self.comboBox_CropType.setGeometry(QtCore.QRect(120, 20, 109, 22))
        self.comboBox_CropType.setObjectName("comboBox_CropType")
        self.comboBox_CropType.addItem("")
        self.label_6 = QtWidgets.QLabel(self.groupBox_3)
        self.label_6.setGeometry(QtCore.QRect(10, 50, 81, 22))
        self.label_6.setObjectName("label_6")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(10, 10, 241, 131))
        self.groupBox_4.setStyleSheet("background-color: rgb(255, 241, 139);")
        self.groupBox_4.setObjectName("groupBox_4")
        self.lineEdit_Yield = QtWidgets.QLineEdit(self.groupBox_4)
        self.lineEdit_Yield.setGeometry(QtCore.QRect(120, 100, 109, 22))
        self.lineEdit_Yield.setObjectName("lineEdit_Yield")
        self.dateEdit_To = QtWidgets.QDateEdit(self.groupBox_4)
        self.dateEdit_To.setGeometry(QtCore.QRect(120, 44, 109, 22))
        self.dateEdit_To.setCalendarPopup(True)
        self.dateEdit_To.setDate(QtCore.QDate(2023, 12, 30))
        self.dateEdit_To.setObjectName("dateEdit_To")
        self.label_3 = QtWidgets.QLabel(self.groupBox_4)
        self.label_3.setGeometry(QtCore.QRect(4, 100, 100, 22))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.dateEdit_From = QtWidgets.QDateEdit(self.groupBox_4)
        self.dateEdit_From.setGeometry(QtCore.QRect(4, 44, 100, 22))
        self.dateEdit_From.setCalendarPopup(True)
        self.dateEdit_From.setCurrentSectionIndex(0)
        self.dateEdit_From.setDate(QtCore.QDate(2023, 2, 1))
        self.dateEdit_From.setObjectName("dateEdit_From")
        self.label_4 = QtWidgets.QLabel(self.groupBox_4)
        self.label_4.setGeometry(QtCore.QRect(4, 19, 100, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_2 = QtWidgets.QLabel(self.groupBox_4)
        self.label_2.setGeometry(QtCore.QRect(4, 72, 100, 22))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.lineEdit_Acreage = QtWidgets.QLineEdit(self.groupBox_4)
        self.lineEdit_Acreage.setGeometry(QtCore.QRect(120, 72, 109, 22))
        self.lineEdit_Acreage.setObjectName("lineEdit_Acreage")
        self.label_5 = QtWidgets.QLabel(self.groupBox_4)
        self.label_5.setGeometry(QtCore.QRect(120, 19, 109, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.pushButton_GetLocation = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_GetLocation.setGeometry(QtCore.QRect(10, 450, 101, 24))
        self.pushButton_GetLocation.setObjectName("pushButton_GetLocation")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 230, 241, 51))
        self.groupBox.setStyleSheet("background-color: rgb(175, 175, 255);")
        self.groupBox.setObjectName("groupBox")
        self.pushButton_cropdemand = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_cropdemand.setGeometry(QtCore.QRect(8, 20, 101, 24))
        self.pushButton_cropdemand.setObjectName("pushButton_cropdemand")
        self.cropwisedata = QtWidgets.QPushButton(self.groupBox)
        self.cropwisedata.setGeometry(QtCore.QRect(120, 20, 119, 24))
        self.cropwisedata.setObjectName("cropwisedata")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1375, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.croptype=''
        self.crop_reg_status_text=""
        self.AreaString = ""
        self.YieldString = ""
        self.todate = ""
        self.fromdate = ""

        self.get_initial_crop_demand_data()
        self.Current_cropdemand_on_cropwisedata_clicked()
        self.on_pushButton_marketArrival_clicked()
        self.on_Get_Data_pushButton_clicked()

        self.pushButton_Start = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Start.setGeometry(QtCore.QRect(138, 650, 101, 24))
        self.pushButton_Start.setObjectName("pushButton_Start")

        # # Define your credentials and Google Sheet ID
        # credentials = ServiceAccountCredentials.from_json_keyfile_name('spiritual-storm-322504-35704a241189.JSON', ['https://www.googleapis.com/auth/spreadsheets'])
        # sheet_id = '1HgPHohNdaZGsV36_WZsqOCjoKCo1irc7Az9a-M6amPg'

        # # Create a client and authorize it using credentials
        # client = gspread.authorize(credentials)

        # # Open the Google Sheet
        # sheet = client.open_by_key(sheet_id)

        # # Get the worksheet by index (0 for the first sheet)
        # worksheet = sheet.get_worksheet(0)
        # service = discovery.build('sheets', 'v4', credentials=credentials)
        # request = {
        #     'spreadsheetId': sheet_id,
        #     'body': {
        #         'requests': [{
        #             'updateSpreadsheetProperties': {
        #                 'properties': {
        #                     'sheetId': worksheet.id,
        #                     'title': worksheet.title,
        #                     'sheetType': 'GRID',
        #                     'gridProperties': {
        #                         'frozenRowCount': 1
        #                     }
        #                 },
        #                 'fields': 'title,gridProperties.frozenRowCount'
        #             }
        #         }]
        #     }
        # }
        # response = service.spreadsheets().batchUpdate(spreadsheetId=sheet_id, body=request).execute()
        # service.spreadsheets().get(spreadsheetId=sheet_id).execute()
        # batch = BatchHttpRequest(callback=self.handle_updates)

        # # Continuously listen for changes
        # while True:
        #     try:
        #         service.spreadsheets().get(spreadsheetId=sheet_id).execute()
        #         break
        #     except Exception as e:
        #         time.sleep(1)

        # service.spreadsheets().get(spreadsheetId=sheet_id).execute()
        # batch.add(service.spreadsheets().get(spreadsheetId=sheet_id))
        # batch.execute()

        # scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
        # credentials = ServiceAccountCredentials.from_json_keyfile_name('spiritual-storm-322504-35704a241189.json', scope)
        
        # # Create a client to interact with the Google Sheet
        # client = gspread.authorize(credentials)
        
        # spreadsheet = client.open(GSHEET_NAME)
        # worksheet = spreadsheet.worksheet(TAB_NAME)
        # worksheet_id = worksheet.id        
        # client.create(worksheet_id, self.handle_updates)

        

        # worksheet_id = worksheet.id          
        # gc.create_alert(worksheet_id, self.handle_updates)
        # while True:
        #     time.sleep(1)

        #self.Get_Data_pushButton.clicked.connect(self.on_Get_Data_pushButton_clicked)
        self.pushButton_cropdemand.clicked.connect(self.get_initial_crop_demand_data)
        self.cropwisedata.clicked.connect(self.Current_cropdemand_on_cropwisedata_clicked)
        self.pushButton_marketArrival.clicked.connect(self.on_pushButton_marketArrival_clicked)
        self.Get_Data_pushButton.clicked.connect(self.on_Get_Data_pushButton_clicked)
        self.pushButton_CropRegister.clicked.connect(self.on_pushButton_CropRegister_clicked)
        self.pushButton_Start.clicked.connect(self.onpushbutton_Start_clicked)

        self.radioButton_cropSown.toggled.connect(self.on_radioButton_cropSown_clicked)
        self.radioButton_totalseed.toggled.connect(self.on_Get_Data_pushButton_clicked)
        self.comboBox_market.currentIndexChanged.connect(self.on_Get_Data_pushButton_clicked)    
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Seed Sown Data"))
        self.radioButton_totalseed.setText(_translate("MainWindow", "Total Seed"))
        self.radioButton_cropUNsown.setText(_translate("MainWindow", "Seed Unsown"))
        self.radioButton_cropSown.setText(_translate("MainWindow", "Seed Sown"))
        self.Get_Data_pushButton.setText(_translate("MainWindow", "Get Data"))
        self.pushButton_CropRegister.setText(_translate("MainWindow", "CropRegister"))
        self.pushButton_Start.setText(_translate("MainWindow", "Start"))
        self.pushButton_ResetDatabase.setText(_translate("MainWindow", "Reset Database"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Market arrival data"))
        self.radioButton_AllCrops_Marketwise.setText(_translate("MainWindow", "All Crops Marketwise"))
        self.radioButton_All_Markets_Cropwise.setText(_translate("MainWindow", "All Markets Cropwise"))
        self.pushButton_marketArrival.setText(_translate("MainWindow", "Get Market Arrival Data"))
        self.comboBox_market.setItemText(0, _translate("MainWindow", "Karimnagar"))
        self.comboBox_market.setItemText(1, _translate("MainWindow", "Shadnagar"))
        self.comboBox_market.setItemText(2, _translate("MainWindow", "Mahabubnagar"))
        self.comboBox_market.setItemText(3, _translate("MainWindow", "Kothagudem"))
        self.comboBox_market.setItemText(4, _translate("MainWindow", "Siddipet"))
        self.comboBox_market.setItemText(5, _translate("MainWindow", "Miryalaguda"))
        self.comboBox_market.setItemText(6, _translate("MainWindow", "Kamareddy"))
        self.comboBox_market.setItemText(7, _translate("MainWindow", "Ibrahimputnam"))
        self.comboBox_market.setItemText(8, _translate("MainWindow", "Jangaon"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">Crop Type</span></p></body></html>"))
        self.comboBox_CropType.setItemText(0, _translate("MainWindow", "All"))
        self.label_6.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">Select Market</span></p></body></html>"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Crop Registration data"))
        self.label_3.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">Total Yield (Tons)</span></p></body></html>"))
        self.label_4.setText(_translate("MainWindow", "Market Arrival From"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">Crop Reg. (Acres)</span></p></body></html>"))
        self.label_5.setText(_translate("MainWindow", "Market Arrival To"))
        self.pushButton_GetLocation.setText(_translate("MainWindow", "Get Location"))
        self.groupBox.setTitle(_translate("MainWindow", "Crop demand data"))
        self.pushButton_cropdemand.setText(_translate("MainWindow", "Initial Demand"))
        self.cropwisedata.setText(_translate("MainWindow", "Current Demand"))
    

    def onpushbutton_Start_clicked(self):
        while True:
            prev_unc = ""
            #while True:
            # Code executed here
            newUnc = self.monitorgooglesheets()
            if prev_unc != newUnc:
                newUnc = self.handle_updates()                
                prev_unc = copy.copy(newUnc)        
            #time.sleep(20)
            QtTest.QTest.qWait(20)
            
    
    def on_pushButton_CropRegister_clicked(self,mobileno,unc):        
        #unc = self.GetRandomUNC()
        #  uncString = str(unc)
        crop = ""
        acers = 0
        #unc = 103
        #mobileno = self.GetMObileNo()
        SownDate = QDate.currentDate()
        
        #SownDate = datetime.date.today()
        print(unc,mobileno)
        latitude_get = random.uniform(16.0,20.0)
        if(latitude_get>19.0 and latitude_get<=20.0):
            longitude = random.uniform(78.0,80.0)
        elif(latitude_get>18.0 and latitude_get<=19.0):
            longitude = random.uniform(77.5,81.0)
        elif(latitude_get>17.0 and latitude_get<=18.0):
            longitude = random.uniform(77.4,81.5)
        elif(latitude_get>16.0 and latitude_get<=17.0):
            longitude = random.uniform(77.3,80.1)
        
        str_true = "1"
        str_false = "0"   
        getunc = mydb.cursor()     
        getunc.execute("SELECT *FROM cropdatabase1 Where UNC = '"+str(unc)+"'")
        #print("Status")
        unc_isavailable = list(getunc.fetchall())
        if not unc_isavailable:
            nounc_string = "NO Seed packet found with UNC No: "+str(unc)
            #print("nounc_string",nounc_string)
        else:
            if unc_isavailable:
                query1 = mydb.cursor()
                unc_record = query1.execute("SELECT *FROM cropdatabase1 Where UNC = '"+str(unc)+"' and Status_ = '"+str_false+"'")
                unc_record = getunc.fetchall()
                unc_record = list(unc_record)
                #print(unc_record)
                if len(unc_record) != 0:
                    unc_record = unc_record[0]
                else:
                    print("Seed packet already sown")
                    return
                #print("unc_record",unc_record[1])

                yielddays = unc_record
                YieldDate = SownDate.addDays(int(unc_record[8]))
                # now.addDays(12).toString(Qt.ISODate)

                # YieldDate = SownDate + timedelta(days=int(unc_record[8]))
                crop = unc_record[0]
                acers = unc_record[5]
                yield_ = unc_record[7]
                market_name = self.getnearmarket(longitude,latitude_get)

                longiString = str(round(longitude, 2))
                latiString = str(round(latitude_get, 2))
                mobileString = str(mobileno)
                yielddatestring = YieldDate.toString('yyyy-MM-dd')
                sowndateString = SownDate.toString('yyyy-MM-dd')
                #print("YieldDate",yielddays,YieldDate)
                update_values = mydb.cursor()                
                update_values.execute("update cropdatabase1 SET MobileNo = '"+mobileString+"',Status_ = '"+str_true+"', SownDate = '"+sowndateString+"', CropLatitude ='"+latiString+"', CropLongitude = '"+longiString+"', YieldDate = '"+yielddatestring+"', Market = '"+market_name+"' where UNC = '"+str(unc)+"'")
                mydb.commit()
                FarmerMessage="Welcome to crop registration. Your "+crop+" crop registration is successfull with seed packet number "+str(unc)
                self.textEdit_cropstatus.setText(" Crop Registation is successfull.\n Seed Packet Number: "+str(unc)+".\n Mobile No : "+mobileString+".\n Crop Type:"+crop+".\n Crop Area:"+str(acers)+" Hector.\n Crop Yield : "+str(yield_)+".\n Expected market Arrival date: "+yielddatestring+".\n Nearest Market = "+market_name+".\n Location: "+latiString+","+longiString+".")
                self.updateCropDemand(crop,acers,FarmerMessage)
            else :
                FarmerMessage="Welcome to crop registration. Your "+crop+" crop registration is already registered with seed packet number "+str(unc)
                self.textEdit_cropstatus.setText("Already registered the crop with UNC No: "+str(unc))
                self.updateCropDemand(crop,acers,FarmerMessage)

        #print(crop_reg_status_text,crop,acers)
        
        self.on_Get_Data_pushButton_clicked()
        #return crop_reg_status_text

    def on_Get_Data_pushButton_clicked(self):
        croparea=0.0
        yield_ = 0.0
        trueString = "1"
        CropType = self.comboBox_CropType.currentText()
        
        FromDate = self.dateEdit_From.date()
        toDate = self.dateEdit_To.date()
        FromDatestring = FromDate.toString('yyyy-MM-dd')
        ToDateString = toDate.toString('yyyy-MM-dd')
        myquery = mydb.cursor()

        if self.comboBox_CropType.currentText()=="All":
            myquery.execute("SELECT * from cropdatabase1 where YieldDate BETWEEN '"+FromDatestring+"' and '"+ToDateString+"' AND Status_ = '"+trueString+"'")
        else:
            myquery.execute("SELECT * from cropdatabase1 where YieldDate BETWEEN '"+FromDatestring+"' and '"+ToDateString+"' AND Status_ = '"+trueString+"' AND CropType = '"+CropType+"'")
        
        for rows in myquery:
            #print(rows)
            croparea = croparea+float(rows[5])
            yield_ = yield_+float(rows[7])

        self.lineEdit_Acreage.setText(str(croparea))
        self.lineEdit_Yield.setText(str(yield_))

        if self.radioButton_totalseed.isChecked():
            tot_seed = mydb.cursor()
            #tot_seed = QSqlQuery()
            cropList, seedsown, seedunsown, InAcres= [], [], [], []
            
            tot_seed.execute("SELECT CropType, SUM(SeedWeight), SUM(CropArea), SUM(Yield) FROM cropdatabase1 GROUP By CropType ORDER BY CropType")
            data_df = pd.DataFrame(tot_seed.fetchall())
            # Create a QStandardItemModel and set the column and row count
            model = QStandardItemModel()
            model.setColumnCount(len(data_df.columns))
            model.setRowCount(len(data_df))

            # Set the column headers
            for column_index, column_name in enumerate(data_df.columns):
                model.setHeaderData(column_index, Qt.Horizontal, column_name)

            # Set the data from the DataFrame to the model
            for row in range(len(data_df)):
                for column in range(len(data_df.columns)):
                    item = QStandardItem(str(data_df.iloc[row, column]))
                    model.setItem(row, column, item)

            # Set the model to the QTableView
            self.tableView_GetData.setModel(model)

        if self.radioButton_cropSown.isChecked():
            model = QSqlQueryModel()
            croptypedata = mydb.cursor()
            s="1"
            croptypedata.execute("SELECT CropType, SUM(SeedWeight), SUM(CropArea), SUM(Yield) FROM cropdatabase1 where Status_ = '"+s+"' GROUP By CropType ORDER BY CropType")
            data_df = pd.DataFrame(croptypedata.fetchall())
            #print(data_df)
            model = QStandardItemModel()
            model.setColumnCount(len(data_df.columns))
            model.setRowCount(len(data_df))
            # Set the column headers
            for column_index, column_name in enumerate(data_df.columns):
                model.setHeaderData(column_index, Qt.Horizontal, column_name)

                # Set the data from the DataFrame to the model
            for row in range(len(data_df)):
                for column in range(len(data_df.columns)):
                    item = QStandardItem(str(data_df.iloc[row, column]))
                    model.setItem(row, column, item)

                # Set the model to the QTableView
            self.tableView_GetData.setModel(model)
                

        if self.radioButton_cropUNsown.isChecked():
            model = QSqlQueryModel()
            croptypedata = mydb.cursor()
            s="0"
            croptypedata.execute("SELECT CropType,SUM(SeedWeight), SUM(CropArea),SUM(Yield) FROM cropdatabase1 where Status_ = '"+s+"' GROUP By CropType ORDER BY CropType")
            data_df = pd.DataFrame(croptypedata.fetchall())
            #print("Srinivas",data_df)
            model = QStandardItemModel()
            model.setColumnCount(len(data_df.columns))
            model.setRowCount(len(data_df))
            # Set the column headers
            for column_index, column_name in enumerate(data_df.columns):
                model.setHeaderData(column_index, Qt.Horizontal, column_name)

                # Set the data from the DataFrame to the model
            for row in range(len(data_df)):
                for column in range(len(data_df.columns)):
                    item = QStandardItem(str(data_df.iloc[row, column]))
                    model.setItem(row, column, item)

                    # Set the model to the QTableView
            self.tableView_GetData.setModel(model)
        self.Get_currentCrop_Registration_Data()
  
    def Get_currentCrop_Registration_Data(self):
        cropList, seedsown, seednotsown = [], [], []
        croptype_sown_map={}
        model = QSqlQueryModel()
        getcroptypeqry = mydb.cursor()
        getcroptypeqry.execute("select distinct CropType from cropdatabase1")  
        for rows in getcroptypeqry:
            cropList.append(str(rows[0]))
        s="1"
        seedsownqry = mydb.cursor()
        seedsownqry.execute("SELECT CropType, SUM(CropArea) FROM cropdatabase1 where Status_ = '"+s+"' GROUP By CropType")
        for rows in seedsownqry:
            xx=[]
            xx.append(str(rows[1]))
            xx.append("0")
            croptype_sown_map[str(rows[0])] = xx
        seednotsownqry = mydb.cursor()
        s="0"
        crop_sown_unsown_map={}
        croptype_notsown_map={}
        seednotsownqry.execute("SELECT CropType, SUM(CropArea) FROM cropdatabase1 where Status_ = '"+s+"' GROUP By CropType")
        for rows in seednotsownqry:
            xx=[]
            xx.append("0")
            xx.append(str(rows[1]))
            croptype_notsown_map[str(rows[0])]= xx
            crop_sown_unsown_map[str(rows[0])]= xx           
        #print(croptype_sown_map,crop_sown_unsown_map)
        for keyi, valuesi in croptype_sown_map.items():
            for keyj, valuesj in croptype_notsown_map.items():
                if keyi == keyj:
                    acrelistsown = valuesi
                    acrelist_notsown = valuesj
                    Sown_Unsownacrelist = valuesi
                    a = float(acrelistsown[0])
                    b = float(acrelist_notsown[0])
                    c = a+b
                    valueAsString0 = str(c)
                    Sown_Unsownacrelist[0] = valueAsString0
                    a = float(acrelistsown[1])
                    b = float(acrelist_notsown[1])
                    c = a+b
                    valueAsString1 = str(c)
                    Sown_Unsownacrelist[1] = valueAsString1

                    for keyk,valuek in crop_sown_unsown_map.items():
                        if keyk == keyi:
                            crop_sown_unsown_map[keyk]=Sown_Unsownacrelist
        croplist = crop_sown_unsown_map.keys()
        All_ares = crop_sown_unsown_map.values()
        sown, notSown=[],[]
        for i in All_ares:
            sown.append(i[0])
            notSown.append(i[1])
        
        self.plotBarcharts(croplist,sown, notSown)


    def plotBarcharts(self,cropList, seedsown, seednotsown):        
        barset_sown = QBarSet("Seed Sown")
        barset_unsown = QBarSet("Seed Unsown")
        for i in range(0,len(cropList)):
            barset_sown.append(float(seedsown[i]))
            barset_unsown.append(float(seednotsown[i]))
        series = QBarSeries()
        series.append(barset_sown)
        series.append(barset_unsown)

        chart = QChart()
        chart.addSeries(series)
        chart.setTitle("Crop Registration (In Acres)")
        chart.setAnimationOptions(QChart.SeriesAnimations)

        axisX = QBarCategoryAxis()
        axisX.append(cropList)
        chart.addAxis(axisX, Qt.AlignBottom)
        series.attachAxis(axisX)

        axisY = QValueAxis()
        chart.addAxis(axisY, Qt.AlignLeft)
        series.attachAxis(axisY)

        chart.legend().setVisible(True)
        chart.legend().setAlignment(Qt.AlignBottom)

        chart_view = QChartView(chart)
        chart_view.setRenderHint(QPainter.Antialiasing)
        
        layout = QVBoxLayout(self.widgetSeed_Data_plot)
        layout.addWidget(chart_view)
        layout.deleteLater()

    def on_pushButton_marketArrival_clicked(self):
        #print("in on_pushButton_marketArrival_clicked")
        if self.radioButton_AllCrops_Marketwise.isChecked():
            #print("in radioButton_All_Markets_Cropwise")
            market_supply=mydb.cursor()
            str_true = "1"
            FromDate = self.dateEdit_From.date()
            toDate = self.dateEdit_To.date()
            
            FromDatestring = FromDate.toString('yyyy-MM-dd')
            ToDateString = toDate.toString('yyyy-MM-dd')     
            market= self.comboBox_market.currentText()
            market_supply.execute("select SUM(Yield), CropType from cropdatabase1 where Status_ = '"+str_true+"' and YieldDate BETWEEN '"+FromDatestring+"' and '"+ToDateString+"' and Market = '"+market+"' group by CropType");
        
            cropList = []
            YieldList = []
            for row in market_supply:
                cropList.append(row[1])
                YieldList.append(float(row[0]))
    
            self.MarketArrivalGraph(cropList, YieldList, market, "Expected quantity of crops at '"+market+"' market")
        #############################################################################################################################
        if self.radioButton_All_Markets_Cropwise.isChecked():       
            allmarkets_cropwise=mydb.cursor()
            str_true = "1"
            FromDate = self.dateEdit_From.date()
            toDate = self.dateEdit_To.date()
            
            FromDatestring = FromDate.toString('yyyy-MM-dd')
            ToDateString = toDate.toString('yyyy-MM-dd')      
            croptype= self.comboBox_CropType.currentText()
            allmarkets_cropwise.execute("select SUM(Yield), Market from cropdatabase1 where Status_ = '"+str_true+"' and YieldDate BETWEEN '"+FromDatestring+"' and '"+ToDateString+"' and CropType = '"+croptype+"' group by Market");
            MarketList = []
            YieldList = []
            for row in allmarkets_cropwise:
                MarketList.append(row[1])
                YieldList.append(float(row[0]))
    
            self.MarketArrivalGraph(MarketList, YieldList, croptype, "Expected quantity of '"+croptype+"' at all market")

        # **********Market Arrival groupby croptype  *********************************************************************************************************
        
    def MarketArrivalGraph(self, X_axis_variable, YieldList, croptype, Plot_title):
        #print("in MarketArrivalGraph")
        barset = QBarSet("Crop Yield in Tons")
        for value in YieldList:
            barset.append(float(value))
        series = QBarSeries()
        series.append(barset)

        chart = QChart()
        chart.addSeries(series)
        chart.setTitle(Plot_title)
        chart.setAnimationOptions(QChart.SeriesAnimations)

        axisX = QBarCategoryAxis()
        axisX.append(X_axis_variable)
        chart.addAxis(axisX, Qt.AlignBottom)
        series.attachAxis(axisX)

        axisY = QValueAxis()
        chart.addAxis(axisY, Qt.AlignLeft)
        series.attachAxis(axisY)

        chart.legend().setVisible(True)
        chart.legend().setAlignment(Qt.AlignBottom)

        chart_view = QChartView(chart)
        chart_view.setRenderHint(QPainter.Antialiasing)
        
        layout = QVBoxLayout(self.widget_plot)
        layout.addWidget(chart_view)
        layout.deleteLater()      

    def Current_cropdemand_on_cropwisedata_clicked(self):
        cropList=[]
        InAcres=[]
        mycursor = mydb.cursor()        
        mycursor.execute("select *from currentcropdemand group by CropType ORDER BY Acreage DESC")  
        
        for row in mycursor:
            cropList.append(str(row[0]))
            InAcres.append(str(row[1]))
        
        barset = QBarSet("Yield in Tons")
        for value in InAcres:
            barset.append(float(value))
        series = QBarSeries()
        series.append(barset)

        chart = QChart()
        chart.addSeries(series)
        chart.setTitle("Current Crop Demand in (Acres)")
        chart.setAnimationOptions(QChart.SeriesAnimations)

        axisX = QBarCategoryAxis()
        axisX.append(cropList)
        chart.addAxis(axisX, Qt.AlignBottom)
        series.attachAxis(axisX)

        axisY = QValueAxis()
        chart.addAxis(axisY, Qt.AlignLeft)
        series.attachAxis(axisY)

        chart.legend().setVisible(True)
        chart.legend().setAlignment(Qt.AlignBottom)

        chart_view = QChartView(chart)
        chart_view.setRenderHint(QPainter.Antialiasing)
        
        layout = QVBoxLayout(self.widgetCurrentCropDemand)
        layout.addWidget(chart_view)

    def on_pushButton_cropdemand_clicked(self):
        qry = mydb.cursor()
        qry.execute("select *from demanddata GROUP BY CropType ")
        cropList = ""
        InAcres = ""
        for row in qry:
            #print(row)
            cropList.append(row[0])
            InAcres.append(row[1])     
   
    def get_initial_crop_demand_data(self):
        cropList=[]
        InAcres=[]
        mycursor = mydb.cursor()        
        mycursor.execute("select CropType, Acerage from demanddata GROUP BY CropType")  
        
        for row in mycursor:
            cropList.append(str(row[0]))
            InAcres.append(str(row[1]))
        
        self.comboBox_CropType.addItem("All")
        self.comboBox_CropType.addItems(cropList)
        barset = QBarSet("Yield in Tons")
        for value in InAcres:
            barset.append(float(value))
        series = QBarSeries()
        series.append(barset)

        chart = QChart()
        chart.addSeries(series)
        chart.setTitle("Initial Crop Demand in (Acres)")
        chart.setAnimationOptions(QChart.SeriesAnimations)

        axisX = QBarCategoryAxis()
        axisX.append(cropList)
        chart.addAxis(axisX, Qt.AlignBottom)
        series.attachAxis(axisX)

        axisY = QValueAxis()
        chart.addAxis(axisY, Qt.AlignLeft)
        series.attachAxis(axisY)

        chart.legend().setVisible(True)
        chart.legend().setAlignment(Qt.AlignBottom)

        chart_view = QChartView(chart)
        chart_view.setRenderHint(QPainter.Antialiasing)
        
        layout = QVBoxLayout(self.widgetCropDemand)
        layout.addWidget(chart_view)


        #barset.append(InAcres)

        # Create bar series and add bar sets
        # barseries = QBarSeries()
        # barseries.append(barset)

        # # Create chart and set the bar series
        # chart = QChart()
        # chart.addSeries(barseries)

        # # Create axes
        # axis_x = QBarCategoryAxis()
        # axis_x.append(cropList)
        # chart.addAxis(axis_x, Qt.AlignBottom)
        # self._line_series.attachAxis(self._axis_x)
        # self._bar_series.attachAxis(self._axis_x)

        # axis_y = QValueAxis()
        # chart.addAxis(axis_x, Qt.AlignBottom)
        # chart.addAxis(axis_y, Qt.AlignLeft)
        # barseries.attachAxis(axis_x)
        # barseries.attachAxis(axis_y)

        # # Set chart title and labels
        # chart.setTitle("Initial Crop Demand in (Acres)")
        # chart.setAnimationOptions(QChart.SeriesAnimations)
        # chart.legend().setVisible(True)
        # chart.legend().setAlignment(Qt.AlignBottom)

        # # Create chart view and set the chart
        # chart_view = QChartView(chart)
        # chart_view.setRenderHint(QPainter.Antialiasing)
        
        # layout = QVBoxLayout(self.widgetSeed_Data_plot)
        # layout.addWidget(chart_view)
        

        #return data_df
    
    def get_marketNames(self):
        mycursor = mydb.cursor()
        mycursor.execute("select Market, CropLatitude, CropLongitude from market")
        data_df = pd.DataFrame(mycursor.fetchall())
        data_df.columns = ['Market Name','Latitude', 'Longitude']   
        return data_df

    def GetRandomUNC(self):
        getUNCqry = mydb.cursor()
        FalseString = "0"   
        getUNCqry.execute("select UNC from cropdatabase1 where Status_ = '"+FalseString+"'")
        data_df = pd.DataFrame(getUNCqry.fetchall())
        data_df.columns = ['UNC']
        unclist = data_df['UNC'].tolist()
        #print(unclist)
        unc = random.choice(unclist)
        return unc
       
    def GetMObileNo(self):    
        n = 10
        mobnum = ''.join(["{}".format(randint(0, 9)) for num in range(0, n)])
        return mobnum
    
    def getnearmarket(self,longi, lati):
        markDistqry = mydb.cursor()   
    
        market_name = []
        dist = []
        markDistqry.execute("select * from markets")
        n=0
        for row in markDistqry:
            #print(row)
            market_name.append(row[0])      
            M_lati = float(row[1])
            M_longi = float(row[2])      
            d= math.sqrt(((lati-M_lati)*(lati-M_lati))+((longi-M_longi)*(longi-M_longi)))
            dist.append(d)
            n=n+1
        
        #print(market_name,dist)
        near_market = market_name[0]
        min_dist=dist[0]
        for i in range(0,n):
            if min_dist > dist[i]:
                near_market = market_name[i]
                min_dist = dist[i] 
        #print(near_market)
        return near_market

    def updateCropDemand(self,croptype, Acres, FarmerMessage):
        #print(croptype,Acres)
        updatedAcreagestring = ""
        qry = mydb.cursor()
        qry_update_demand= mydb.cursor()
        #QSqlQueryModel *model = new QSqlQueryModel();
        qry.execute("select Acreage from currentcropdemand where CropType = '"+croptype+"'")
        for row in qry:
            updatedAcreage = round(float(row[0]) - float(Acres),1)
            updatedAcreagestring = str(updatedAcreage)
        #print(croptype,Acres,updatedAcreagestring)
        qry_update_demand.execute("update currentcropdemand SET Acreage = '"+updatedAcreagestring+"' where CropType = '"+croptype+"'")
        mydb.commit()
        self.Write_current_crop_demand_GoogleSheets(FarmerMessage)

    def on_radioButton_cropSown_clicked(self):
        self.on_Get_Data_pushButton_clicked()
    def on_radioButton_cropUNsown_clicked(self):
        self.on_Get_Data_pushButton_clicked()
    def on_radioButton_totalseed_clicked(self):
        self.on_Get_Data_pushButton_clicked()
    def on_comboBox_market_activated(self,index):
        self.on_pushButton_marketArrival_clicked()
    #def read_and_write_Crop_Registration_Farmer(self):

    def Write_current_crop_demand_GoogleSheets(self,FarmerMessage):
        cropList=[]
        InAcres=[]
        mycursor = mydb.cursor()        
        mycursor.execute("select *from currentcropdemand group by CropType ORDER BY Acreage DESC")
        All_crop_current_demand_string="Welcome to crop registration. The present cropwise demand in Acres"        
        for row in mycursor:
            temp = "=".join([str(row[0]),str(row[1])])
            All_crop_current_demand_string = ", ".join([All_crop_current_demand_string,temp])
        #print(All_crop_current_demand_string) 
        GSHEET_NAME = 'DBF_IMR_sheet 1'
        TAB_NAME = 'Sheet1' 
        ##############Write current crop demand to DBF_IMR_sheet 1 google sheet############################################################################
        gc = gspread.service_account(filename='spiritual-storm-322504-35704a241189.json')
        sh = gc.open(GSHEET_NAME)
        worksheet = sh.worksheet(TAB_NAME)       
        worksheet.update('A1',All_crop_current_demand_string)


        GSHEET_NAME = 'DBF_IMR_Sheet2'
        TAB_NAME = 'Sheet1'         
        ##############Write registration status to DBF_IMR_Sheet2 google sheet############################################################################
        gc = gspread.service_account(filename='spiritual-storm-322504-35704a241189.json')
        sh = gc.open(GSHEET_NAME)
        worksheet = sh.worksheet(TAB_NAME)
        #worksheet_id = worksheet.id
        #client.create_alert(worksheet_id, handle_updates)
        worksheet.update('D1',FarmerMessage)

    def handle_updates(self):        
        try: 
            GSHEET_NAME = 'DBF_IMR_Sheet2'
            TAB_NAME = 'Sheet1'         
            ##############Write registration status to DBF_IMR_Sheet2 google sheet############################################################################
            gc = gspread.service_account(filename='spiritual-storm-322504-35704a241189.json')
            sh = gc.open(GSHEET_NAME)
            worksheet = sh.worksheet(TAB_NAME)
            #worksheet_id = worksheet.id
            #client.create_alert(worksheet_id, handle_updates)
            mobileno = worksheet.acell('C1').value
            seedpacketno = worksheet.acell('D1').value
            self.on_pushButton_CropRegister_clicked(mobileno,seedpacketno)
            print("Updated cell")
        except WorksheetNotFound:
            print("Worksheet not found!")
        return seedpacketno
        
        

        # gc = gspread.service_account(filename='spiritual-storm-322504-35704a241189.json')
        # print(gc.import_csv)
        # sh = gc.open(GSHEET_NAME)
        # worksheet = sh.worksheet(TAB_NAME)
        # df = pd.DataFrame(worksheet.get_all_records())
        # print(df)

    
    def monitorgooglesheets(self):
        GSHEET_NAME = 'DBF_IMR_Sheet2'
        TAB_NAME = 'Sheet1'         
        gc = gspread.service_account(filename='spiritual-storm-322504-35704a241189.json')
        sh = gc.open(GSHEET_NAME)
        worksheet = sh.worksheet(TAB_NAME)        
        datachange_UNC = worksheet.acell('D1').value
        return datachange_UNC             


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

    
    
